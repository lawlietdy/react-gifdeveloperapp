{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","placeholder","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","original","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","Fragment","key","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAGaA,EAAc,SAAC,GAAyB,IAAtBC,EAAqB,EAArBA,cAAqB,EAEZC,mBAAS,IAFG,mBAEzCC,EAFyC,KAE7BC,EAF6B,KAiBhD,OACI,0BAAMC,SAVW,SAAAC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,OAMd,2BACIO,KAAK,OACLC,MAAUT,EACVU,YAAY,yBACZC,SAnBc,SAAAR,GACtBF,EAAcE,EAAES,OAAOH,Y,uBCNlBI,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACqCC,UAAWH,GADhD,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,SAASZ,QATf,kBAaZM,GAbY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAGtC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCAJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECLb,SAAEA,GAAe,IAAD,EAEdf,mBAAS,CAC/BsB,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WAEPxB,EAASC,GACJwB,MAAM,SAAAC,GACCH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAI1B,CAAEpB,IAEEqB,EDZ2BK,CAAc1B,GAAlCa,EAFuB,EAE7BN,KAAca,EAFe,EAEfA,QAEtB,OACI,kBAAC,IAAMO,SAAP,KACI,4BAAM3B,GACJoB,GAAW,uBAAGJ,UAAU,oCAAb,WACb,yBAAKA,UAAU,aAEPH,EAAOJ,KAAK,SAAAC,GAAG,OACX,kBAAC,EAAD,eACIkB,IAAMlB,EAAIC,IACLD,UEgBlBmB,EAhCM,WAAM,MAGa5C,mBAAS,CAAC,aAHvB,mBAGhB6C,EAHgB,KAGJ9C,EAHI,KAUvB,OACI,kBAAC,IAAM2C,SAAP,KACI,4CACA,kBAAC,EAAD,CAAa3C,cAAgBA,IAC7B,6BAEA,4BAEQ8C,EAAWrB,KAAK,SAACT,GAAD,OACZ,kBAAC,EAAD,CACIA,SAAWA,EACX4B,IAAM5B,UCpB5B+B,G,MAAUC,SAASC,cAAc,UACvCC,IAASC,OAAQ,kBAAC,EAAD,MAAkBJ,I","file":"static/js/main.aec48648.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ( { setCategories } ) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); //Si se queda useState() vacio significa undefined, se de ocupar useState('')\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue(e.target.value); // Asigna el nuevo valor que se esta escribiedo\r\n    }\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault(); // Previe la actualizacion de la pagina al momento de dar enter\r\n        // setInputValue('');\r\n        if( inputValue.trim().length > 2 ) {\r\n            setCategories( cats => [ inputValue, ...cats ]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ handleSubmit }>\r\n            <input \r\n                type=\"text\"\r\n                value = { inputValue } \r\n                placeholder=\"Ingrese una categorias\" \r\n                onChange= { handleInputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = { // Regla para validar que la func es requerida.\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\n\r\nexport const getGifs = async ( category ) => { // Esta forma esta mal, porque cada vez que se llama otro componente se vuelve a hacer la peticion HTTPS \r\n    const url  = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=jXEZAIhBGZCpm1l3cx64iIOUAVF63RAo`; //encodeURI() sirve para mandar un texto con espacios\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.original.url,\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { id, title, url} ) => {\r\n\r\n    // console.log(id, title, url)\r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n            <img src={ url } alt={ title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n// La funcion recibe informacion por medio de los props, para obtener el valor\r\n// Se deberia poner GifGrid = ( props ) => {} y se deberia llamar dentro del codigo\r\n// como props.NombreDeLProp, para evitar esto se debe desestructurar el elemento de la siguiente manera\r\n// GifGrid = ( {  nombreDelProp } ) => {} y asi solo llamar al prop asi: nombreDelProp\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const { data: images, loading } = useFetchGifs( category );\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3>{ category }</h3>\r\n            { loading && <p className=\"animate__animated animate__flash\">Loading</p> }\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem  \r\n                            key={ img.id}\r\n                            { ...img }\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    \r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n\r\n        getGifs( category )\r\n            .then( imgs => {\r\n                    setState({\r\n                        data: imgs,\r\n                        loading: false,\r\n                    });\r\n            })\r\n\r\n    }, [ category ])\r\n\r\n    return state; // {data: [], loading: true}\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\n\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai x', 'Dragon Ball']; // De esta manera no se hace\r\n    const [categories, setCategories] = useState(['Mr Robot']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setCategories( [...categories, 'Animals'] );\r\n    //     setCategories( cats => [...cats, 'Animals'] );\r\n    // }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categories.map( (category) => (\r\n                        <GifGrid \r\n                            category={ category } \r\n                            key={ category }\r\n                            />) \r\n                        )\r\n                }\r\n            </ol>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default GifExpertApp;","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport GifExpertApp from './GifExpertApp'\r\n\r\nimport './index.css';\r\n\r\nconst divRoot = document.querySelector('#root');\r\nReactDOM.render( <GifExpertApp />, divRoot);\r\n\r\n// GifExpertApp\r\n\r\n// <h2>GifExpertApp</h2>\r\n// <hr />"],"sourceRoot":""}